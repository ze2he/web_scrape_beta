from bs4 import BeautifulSoup
import requests

import re

import xlsxwriter
import wget

workbook = xlsxwriter.Workbook('hello.xlsx')
worksheet = workbook.add_worksheet()

f=open('samplelist.txt')
text=f.readlines()
# print(text)
# f.close()

a=[]
[a.append(line.rstrip("\n"))for line in text]
# print(a)

row = 0
col = 0
rowtotalvol = 0
rowtotalweight = 0

for i in a:
    html_text = requests.get(i).text
    soup = BeautifulSoup(html_text, 'lxml')

    pid = soup.find('span', class_='pip-product-identifier__value').text
    worksheet.write(row, col, pid)
    col = col + 1

    # print(soup.find(class_=['pip-status']))

    pprice = (soup.find('span', class_='pip-price').text).strip('$')
    worksheet.write(row, col, pprice)
    col = col + 1

    worksheet.write(row, col, i)
    col = col + 1

    pname = soup.find('span', class_='pip-header-section__title--big').text
    worksheet.write(row, col, pname)
    col = col + 1

    pdesc = (soup.find('span', class_='pip-header-section__description').text).strip('Show measurements specifications')
    worksheet.write(row, col, pdesc)
    col = col + 1

    pdesclong = soup.find('p', class_='pip-product-summary__description').text
    worksheet.write(row, col, pdesclong)
    col = col + 1

    imagelist = []
    for imageitemcontainer in soup.find(class_=['pip-media-grid__grid']).find_all(class_=['pip-aspect-ratio-image__image']):
        imagetag = imageitemcontainer['srcset'][ 0 : imageitemcontainer['srcset'].index('?')].strip()

        # savelocation = str(pid.replace('.',''))+'.jpg'
        # wget.download(imagetag,savelocation)

        imagelist.append(imagetag)
    image_string = ','.join(imagelist)
    worksheet.write(row, col, image_string)
    col = col + 1

    for item in soup.find_all(class_=['pip-product-dimensions__package-container']):

        for inneritem in item.find_all(class_=['pip-product-dimensions__measurement-container']):

            containertotalvol = 0
            containertotalweight = 0
            vw = 0
            vh = 0
            vl = 0
            vm = 0
            vq = 0
            verror = 0
            vvolume = 0
            vweight = 0

            dimline = inneritem.find_all('p', { 'class' : ['pip-product-dimensions__measurement-wrapper', 'pip-pip-product-dimensions__measurement-wrapper']})

            for dimliner in dimline:

                if 'Width' in dimliner.text:
                    vw = float(re.sub('[a-zA-Z:()]', '', dimliner.text))
                elif 'Height' in dimliner.text:
                    vh = float(re.sub('[a-zA-Z:()]', '', dimliner.text))
                elif 'Length' in dimliner.text:
                    vl = float(re.sub('[a-zA-Z:()]', '', dimliner.text))
                elif 'Weight' in dimliner.text:
                    vm = float(re.sub('[a-zA-Z:()]', '', dimliner.text))
                elif 'Package' in dimliner.text:
                    vq = float(re.sub('[a-zA-Z:()]', '', dimliner.text))
                else:
                    verror = 1

                if verror!=1:
                    vvolume = vw*vh*vl*vq
                    vweight = vm*vq

                containertotalvol = containertotalvol + vvolume
                containertotalweight = containertotalweight + vweight

            rowtotalvol = rowtotalvol + containertotalvol
            rowtotalweight = rowtotalweight + containertotalweight

    worksheet.write(row, col, rowtotalvol)
    worksheet.write(row, col+1, rowtotalweight)
    rowtotalvol = 0
    rowtotalweight = 0
    col = 0
    row += 1

workbook.close()

# pip-product-dimensions__measurement-container
# pip-product-dimensions__measurement-wrapper
# pip-product-dimensions__measurement-name
# pip-product-dimensions__measurement-value
